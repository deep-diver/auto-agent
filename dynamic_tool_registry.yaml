- tool_names:
  - get_weather_for_location
  code: "import requests\nimport os\nimport json\n\ndef get_weather_for_location(location_query:\
    \ str) -> str:\n    \"\"\"\n    Fetches current weather data for a specified location\
    \ using OpenWeatherMap API.\n\n    Args:\n        location_query: A string representing\
    \ the location, e.g., \"City, CountryCode\" or \"City\".\n                   \
    \     Examples: \"London, UK\", \"Tokyo\", \"Daejeon, South Korea\".\n\n    Returns:\n\
    \        A JSON string containing structured weather information (location name,\
    \ country code,\n        temperature in Celsius, feels like temperature in Celsius,\
    \ weather description,\n        humidity percentage, wind speed in meters/sec)\
    \ if successful.\n        Returns a JSON string with an \"error\" key if the API\
    \ key is missing,\n        the location is not found, or any other error occurs\
    \ during the API call.\n    \"\"\"\n    api_key = os.environ.get('OPEN_WEATHER_API_KEY')\n\
    \    if not api_key:\n        return json.dumps({\"error\": \"OpenWeatherMap API\
    \ key (OPEN_WEATHER_API_KEY) not found in environment.\"})\n\n    base_url = \"\
    https://api.openweathermap.org/data/2.5/weather\"\n    params = {\n        \"\
    q\": location_query,\n        \"appid\": api_key,\n        \"units\": \"metric\"\
    \  # For temperature in Celsius and wind speed in meter/sec\n    }\n\n    try:\n\
    \        response = requests.get(base_url, params=params)\n        response.raise_for_status()\
    \  # Raises an HTTPError for bad responses (4XX or 5XX)\n        data = response.json()\n\
    \n        # OpenWeatherMap uses 'cod' internal status code. 200 means success.\n\
    \        # This should be an int, but comparing as string for safety if API behavior\
    \ varies.\n        if str(data.get(\"cod\")) != \"200\":\n            error_message\
    \ = data.get(\"message\", \"Unknown error from OpenWeatherMap API (non-200 'cod').\"\
    )\n            return json.dumps({\"error\": f\"API Error: {error_message}\",\
    \ \"api_cod\": data.get(\"cod\")})\n\n        weather_data_list = data.get(\"\
    weather\")\n        description = \"N/A\"\n        if weather_data_list and isinstance(weather_data_list,\
    \ list) and len(weather_data_list) > 0:\n            description = weather_data_list[0].get(\"\
    description\", \"N/A\")\n\n        weather_info = {\n            \"location_name\"\
    : data.get(\"name\", \"N/A\"),\n            \"country_code\": data.get(\"sys\"\
    , {}).get(\"country\", \"N/A\"),\n            \"temperature_celsius\": data.get(\"\
    main\", {}).get(\"temp\", \"N/A\"),\n            \"feels_like_celsius\": data.get(\"\
    main\", {}).get(\"feels_like\", \"N/A\"),\n            \"weather_description\"\
    : description,\n            \"humidity_percent\": data.get(\"main\", {}).get(\"\
    humidity\", \"N/A\"),\n            \"wind_speed_mps\": data.get(\"wind\", {}).get(\"\
    speed\", \"N/A\")\n        }\n        return json.dumps(weather_info)\n\n    except\
    \ requests.exceptions.HTTPError as http_err:\n        error_message_detail = str(http_err)\n\
    \        status_code = \"N/A\"\n        if hasattr(http_err, 'response') and http_err.response\
    \ is not None:\n            status_code = http_err.response.status_code\n    \
    \        try:\n                # Try to get more specific error from OWM response\
    \ body if it's JSON\n                error_data = http_err.response.json()\n \
    \               if \"message\" in error_data:\n                    error_message_detail\
    \ = error_data[\"message\"]\n            except json.JSONDecodeError:\n      \
    \          # Response body is not JSON, stick to original http_err message or\
    \ response text\n                error_message_detail = http_err.response.text\
    \ if http_err.response.text else str(http_err)\n        \n        return json.dumps({\"\
    error\": f\"HTTP error calling OpenWeatherMap API: {error_message_detail}\", \"\
    status_code\": status_code})\n    except requests.exceptions.RequestException\
    \ as req_err:\n        # For network issues, DNS failures, timeouts etc.\n   \
    \     return json.dumps({\"error\": f\"Request error calling OpenWeatherMap API:\
    \ {str(req_err)}\"})\n    except Exception as e:\n        # Catch-all for any\
    \ other unexpected errors\n        return json.dumps({\"error\": f\"An unexpected\
    \ error occurred while fetching weather: {str(e)}\"})\n"
- tool_names:
  - search_web_with_serper
  code: "import requests\nimport json\nimport os\n\ndef search_web_with_serper(query:\
    \ str):\n    \"\"\"\n    Searches the web using the Serper API (google.serper.dev)\
    \ for a given query.\n\n    Args:\n        query (str): The search query.\n\n\
    \    Returns:\n        dict: A dictionary containing structured search results\
    \ including knowledge graph\n              information (if available) and a list\
    \ of organic search results, or an\n              error message if the search\
    \ fails.\n    \"\"\"\n    api_key = os.environ.get('SERPER_API_KEY')\n    if not\
    \ api_key:\n        return {\"error\": \"SERPER_API_KEY not found in environment\
    \ variables.\"}\n\n    url = \"https://google.serper.dev/search\"\n    payload\
    \ = json.dumps({\"q\": query})\n    headers = {\n        'X-API-KEY': api_key,\n\
    \        'Content-Type': 'application/json'\n    }\n\n    try:\n        response\
    \ = requests.request(\"POST\", url, headers=headers, data=payload, timeout=10)\n\
    \        response.raise_for_status()  # Raise an exception for HTTP errors (4xx\
    \ or 5xx)\n        data = response.json()\n\n        results = {\n           \
    \ \"query_executed\": query,\n            \"knowledge_graph_info\": None,\n  \
    \          \"organic_results\": []\n        }\n\n        if \"knowledgeGraph\"\
    \ in data and data[\"knowledgeGraph\"]:\n            kg = data[\"knowledgeGraph\"\
    ]\n            results[\"knowledge_graph_info\"] = {\n                \"title\"\
    : kg.get(\"title\"),\n                \"type\": kg.get(\"type\"),\n          \
    \      \"description\": kg.get(\"description\"),\n                \"description_source\"\
    : kg.get(\"descriptionSource\"),\n                \"description_link\": kg.get(\"\
    descriptionLink\"),\n                \"website\": kg.get(\"website\"),\n     \
    \           \"image_url\": kg.get(\"imageUrl\"),\n                \"attributes\"\
    : kg.get(\"attributes\")\n            }\n\n        if \"organic\" in data and\
    \ data[\"organic\"]:\n            for item in data[\"organic\"]:\n           \
    \     results[\"organic_results\"].append({\n                    \"title\": item.get(\"\
    title\"),\n                    \"link\": item.get(\"link\"),\n               \
    \     \"snippet\": item.get(\"snippet\"),\n                    \"position\": item.get(\"\
    position\")\n                })\n        \n        if not results[\"knowledge_graph_info\"\
    ] and not results[\"organic_results\"]:\n            return {\"message\": \"No\
    \ relevant information found for the query.\", \"query_executed\": query}\n\n\
    \        return results\n\n    except requests.exceptions.HTTPError as e:\n  \
    \      return {\"error\": f\"HTTP error occurred: {e}\", \"status_code\": e.response.status_code}\n\
    \    except requests.exceptions.RequestException as e:\n        return {\"error\"\
    : f\"Error calling Serper API: {e}\"}\n    except json.JSONDecodeError:\n    \
    \    return {\"error\": \"Failed to decode JSON response from Serper API.\"}\n\
    \    except Exception as e:\n        return {\"error\": f\"An unexpected error\
    \ occurred: {e}\"}\n"
